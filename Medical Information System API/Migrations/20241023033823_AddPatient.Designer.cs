// <auto-generated />
using System;
using Medical_Information_System_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Medical_Information_System_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241023033823_AddPatient")]
    partial class AddPatient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Medical_Information_System_API.Classes.DoctorDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Speciality")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.PatientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.SpecialityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("speciality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("515a0c43-ab5d-4685-a17d-1b0f18c25ff5"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1351),
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = new Guid("0b444015-f3b3-4c04-a10e-fef54154de8f"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1406),
                            Name = "Анестезиолог-реаниматолог"
                        },
                        new
                        {
                            Id = new Guid("78c646e4-2215-432d-8d14-4f5cfb137128"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1409),
                            Name = "Дерматовенеролог"
                        },
                        new
                        {
                            Id = new Guid("a8c33ed4-11a2-4218-ba27-ff4f8e9860ef"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1411),
                            Name = "Инфекционист"
                        },
                        new
                        {
                            Id = new Guid("3863a611-b45c-4493-9206-32a002fa9617"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1412),
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = new Guid("739804ee-5de2-4a27-a7a8-2fd4cbb4fde1"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1415),
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = new Guid("ae3d8ff6-4048-4c00-b105-50cfe8b33c35"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1417),
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = new Guid("8ae5678d-2303-493b-a9ad-b8660b2528ad"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1418),
                            Name = "Отоларинголог"
                        },
                        new
                        {
                            Id = new Guid("a0e01547-ccf1-4123-9790-7cae94aa9836"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1420),
                            Name = "Офтальмолог"
                        },
                        new
                        {
                            Id = new Guid("f186b581-5785-4e41-a50a-1bc033ac595c"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1425),
                            Name = "Психиатр"
                        },
                        new
                        {
                            Id = new Guid("3de5c622-9283-4a8e-8868-532e9b6983ef"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1426),
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = new Guid("03bd5edd-66d6-49ec-b851-bacbc445c9f4"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1428),
                            Name = "Рентгенолог"
                        },
                        new
                        {
                            Id = new Guid("f6c72ec8-e13a-4171-b4cc-e83c50a418a6"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1429),
                            Name = "Стоматолог"
                        },
                        new
                        {
                            Id = new Guid("682b4402-08eb-4bc5-a94c-098f7d85e28a"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1431),
                            Name = "Терапевт"
                        },
                        new
                        {
                            Id = new Guid("a6afb196-9199-4ea7-b169-6d6f33302de4"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1432),
                            Name = "УЗИ-специалист"
                        },
                        new
                        {
                            Id = new Guid("ac7d4b47-3276-4194-8932-fc7acb104b64"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1434),
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = new Guid("f0dbb230-78ef-4c8c-9a5f-c294f5ec7a24"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1435),
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = new Guid("5292064f-1652-4be1-8013-b16f05a8c454"),
                            CreateTime = new DateTime(2024, 10, 23, 3, 38, 22, 590, DateTimeKind.Utc).AddTicks(1440),
                            Name = "Эндокринолог"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
