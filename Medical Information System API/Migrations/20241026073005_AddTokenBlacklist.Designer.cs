// <auto-generated />
using System;
using Medical_Information_System_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Medical_Information_System_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241026073005_AddTokenBlacklist")]
    partial class AddTokenBlacklist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Medical_Information_System_API.Classes.BlacklistToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Token");

                    b.ToTable("tokenBlacklist", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.DoctorDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Speciality")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.PatientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.SpecialityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("speciality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a41507c3-cb56-4cfb-ad1c-ded232427b8a"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7494),
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = new Guid("db399213-0df1-4882-9257-df914a327888"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7546),
                            Name = "Анестезиолог-реаниматолог"
                        },
                        new
                        {
                            Id = new Guid("0259df4b-ef7d-4c90-a0ff-03fa97d926ff"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7549),
                            Name = "Дерматовенеролог"
                        },
                        new
                        {
                            Id = new Guid("09980b3f-fab4-4c72-b6ec-a2ee9afe022b"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7551),
                            Name = "Инфекционист"
                        },
                        new
                        {
                            Id = new Guid("4b246a18-d589-47d7-942a-61dd9d707f01"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7564),
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = new Guid("e515fcad-e900-4804-ae91-8959eb8b02b6"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7569),
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = new Guid("c4f6f6b3-af07-4db6-91f3-8868983a97a1"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7571),
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = new Guid("ae9473c5-064c-49e1-8043-168cfd56d8de"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7573),
                            Name = "Отоларинголог"
                        },
                        new
                        {
                            Id = new Guid("85e1a8fe-0104-41f1-a7ce-4ac0d1afacd0"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7575),
                            Name = "Офтальмолог"
                        },
                        new
                        {
                            Id = new Guid("69e0f635-53ec-4f89-9644-3bbb8b618c0f"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7578),
                            Name = "Психиатр"
                        },
                        new
                        {
                            Id = new Guid("908f4195-1945-4f83-b41a-ef71fe01a6c7"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7580),
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = new Guid("f5a5d7ec-4797-4102-8003-3fe31f1bc882"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7581),
                            Name = "Рентгенолог"
                        },
                        new
                        {
                            Id = new Guid("e33da5c5-e45d-4ca7-a925-765427cb8f9c"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7585),
                            Name = "Стоматолог"
                        },
                        new
                        {
                            Id = new Guid("37d7ecf6-830f-423d-9dec-7414ab4f2990"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7586),
                            Name = "Терапевт"
                        },
                        new
                        {
                            Id = new Guid("bbfe4587-af8d-4506-a35a-9361db96f302"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7588),
                            Name = "УЗИ-специалист"
                        },
                        new
                        {
                            Id = new Guid("caab77ce-0c19-48e7-8b8e-ab64ec00c8a1"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7590),
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = new Guid("9885500b-f8bb-4377-bc56-bc001f68c199"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7592),
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = new Guid("894189fe-a1f8-4408-9a3e-26583a5fec47"),
                            CreateTime = new DateTime(2024, 10, 26, 7, 30, 5, 456, DateTimeKind.Utc).AddTicks(7595),
                            Name = "Эндокринолог"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
