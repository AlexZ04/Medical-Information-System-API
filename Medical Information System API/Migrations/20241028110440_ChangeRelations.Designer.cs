// <auto-generated />
using System;
using Medical_Information_System_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Medical_Information_System_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241028110440_ChangeRelations")]
    partial class ChangeRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Medical_Information_System_API.Classes.BlacklistToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Token");

                    b.ToTable("tokenBlacklist", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConsultationId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("consultation", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.DoctorDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Speciality")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Icd10Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("icd10", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BaseInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Conclusion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NextVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PreviousInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("inspection", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.DiagnosisModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("diagnose", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.DoctorModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DoctorModel");
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.PatientModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.SpecialityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("speciality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7700d6bc-9b50-4707-bbcb-62f168c9c78d"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7028),
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = new Guid("722182aa-18a6-4592-a7b9-f11349c301f1"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7072),
                            Name = "Анестезиолог-реаниматолог"
                        },
                        new
                        {
                            Id = new Guid("01fe0004-dab4-422c-99f4-31a8aa1ada95"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7074),
                            Name = "Дерматовенеролог"
                        },
                        new
                        {
                            Id = new Guid("ad76ec6b-3321-4913-9dc8-a9748908f63d"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7076),
                            Name = "Инфекционист"
                        },
                        new
                        {
                            Id = new Guid("31ed31bf-e93e-48d8-9bff-759c75d2dc47"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7090),
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = new Guid("037400fe-f6e5-4cd3-a1bf-56d8f5bf3ac2"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7094),
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = new Guid("1374ffcd-a93a-4e6c-ad96-b02cf942ad62"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7096),
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = new Guid("28ec18e0-8032-4d3e-867a-d97fbe41a9ea"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7097),
                            Name = "Отоларинголог"
                        },
                        new
                        {
                            Id = new Guid("8457b68e-4eb5-475c-9d1d-167814542e95"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7099),
                            Name = "Офтальмолог"
                        },
                        new
                        {
                            Id = new Guid("ea34808b-bb2c-4357-93b1-9dde99aee1e7"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7101),
                            Name = "Психиатр"
                        },
                        new
                        {
                            Id = new Guid("393cf46c-6833-4a5f-8dcc-8458a6d84629"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7103),
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = new Guid("91c7cee7-3a25-4ce5-ad91-a2fb2d3584c9"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7104),
                            Name = "Рентгенолог"
                        },
                        new
                        {
                            Id = new Guid("51c9f493-1558-45c6-ad6a-7ebdd6502dc5"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7107),
                            Name = "Стоматолог"
                        },
                        new
                        {
                            Id = new Guid("6f312cca-7b03-4f20-9c81-80616d526478"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7110),
                            Name = "Терапевт"
                        },
                        new
                        {
                            Id = new Guid("d5c9b6a4-c675-462e-ac83-545571e03c18"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7111),
                            Name = "УЗИ-специалист"
                        },
                        new
                        {
                            Id = new Guid("1bff1b38-9709-4c8a-a22d-c8d1d8d10425"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7112),
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = new Guid("5809b609-0dbe-4684-96b7-2fc315ddf0f0"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7114),
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = new Guid("042121f0-d31f-4c67-aeed-fae56a4f5aa5"),
                            CreateTime = new DateTime(2024, 10, 28, 11, 4, 39, 818, DateTimeKind.Utc).AddTicks(7116),
                            Name = "Эндокринолог"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Comment", b =>
                {
                    b.HasOne("Medical_Information_System_API.Models.DoctorModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medical_Information_System_API.Classes.Consultation", null)
                        .WithMany("Comments")
                        .HasForeignKey("ConsultationId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Consultation", b =>
                {
                    b.HasOne("Medical_Information_System_API.Classes.Inspection", "Inspection")
                        .WithMany("Consultations")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medical_Information_System_API.Models.SpecialityModel", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Inspection", b =>
                {
                    b.HasOne("Medical_Information_System_API.Models.DoctorModel", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medical_Information_System_API.Models.PatientModel", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.DiagnosisModel", b =>
                {
                    b.HasOne("Medical_Information_System_API.Classes.Inspection", null)
                        .WithMany("Diagnoses")
                        .HasForeignKey("InspectionId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Consultation", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Medical_Information_System_API.Classes.Inspection", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Diagnoses");
                });
#pragma warning restore 612, 618
        }
    }
}
