// <auto-generated />
using System;
using Medical_Information_System_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Medical_Information_System_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241022172219_AddSpecialitiesList")]
    partial class AddSpecialitiesList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Medical_Information_System_API.Classes.DoctorDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Speciality")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("Medical_Information_System_API.Models.SpecialityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("speciality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("781480df-a0d6-4925-9e56-bbae97c2e658"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4821),
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = new Guid("1d4bed19-e0a2-4787-94ad-5ed54bc1e895"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4864),
                            Name = "Анестезиолог-реаниматолог"
                        },
                        new
                        {
                            Id = new Guid("112bc411-8a13-477d-a9bc-7e75485bfe7e"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4866),
                            Name = "Дерматовенеролог"
                        },
                        new
                        {
                            Id = new Guid("ba1e03e1-3cde-4468-b1f4-2d0f7f51927f"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4868),
                            Name = "Инфекционист"
                        },
                        new
                        {
                            Id = new Guid("c879592e-ef60-4de6-b548-3f7ab7bb824c"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4880),
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = new Guid("e02edf77-fd11-4da8-9f2a-ebb5d0559af7"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4883),
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = new Guid("4f522034-9f61-4bcf-96c5-09092c03b555"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4884),
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = new Guid("aabd51ed-25be-46c2-94ca-f59b428aabc8"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4886),
                            Name = "Отоларинголог"
                        },
                        new
                        {
                            Id = new Guid("5589153e-2464-46c9-b72d-d3dfee6d89a3"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4887),
                            Name = "Офтальмолог"
                        },
                        new
                        {
                            Id = new Guid("48cb3cde-68e7-4932-be29-a4851987f657"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4890),
                            Name = "Психиатр"
                        },
                        new
                        {
                            Id = new Guid("7151e7de-3c91-4932-ac3c-a96b7fedc2d9"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4891),
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = new Guid("2b3715d7-397e-45cb-96bf-c50885aaea1a"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4892),
                            Name = "Рентгенолог"
                        },
                        new
                        {
                            Id = new Guid("16d34fb7-4257-426a-9242-960a15615b5d"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4896),
                            Name = "Стоматолог"
                        },
                        new
                        {
                            Id = new Guid("c992dc76-a0e4-4c3d-a45d-18a4cf97c0c7"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4898),
                            Name = "Терапевт"
                        },
                        new
                        {
                            Id = new Guid("bb9dfd97-f86e-43af-b588-220766872889"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4899),
                            Name = "УЗИ-специалист"
                        },
                        new
                        {
                            Id = new Guid("1f8762b9-2026-4896-a76e-d40af9d6a01e"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4901),
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = new Guid("964fc9b4-d0bd-45ac-8704-759a88f34870"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4902),
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = new Guid("49482f68-0744-4c07-a615-a73848f698f3"),
                            CreateTime = new DateTime(2024, 10, 22, 17, 22, 18, 724, DateTimeKind.Utc).AddTicks(4905),
                            Name = "Эндокринолог"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
